//Tobias Lennon X Brian Murphy
package com.example.medi_app;

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;

import com.example.medi_app.model.Form;
import com.google.firebase.ml.modeldownloader.CustomModelDownloadConditions;
import com.google.firebase.ml.modeldownloader.DownloadType;
import com.google.firebase.ml.modeldownloader.FirebaseModelDownloader;
import org.tensorflow.lite.Interpreter;
import java.io.File;
import java.nio.FloatBuffer;

public class MediPredict extends AppCompatActivity {

    private CustomModelDownloadConditions conditions;
    private Form patientForm;
    private Interpreter interpreter;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_medi_predict);

        //PatientForm has all form for AIs, just use .getWhatever()
        patientForm = getIntent().getExtras().getParcelable("patientForm");
        float[][] bigTest = {{0, 84, 82, 31, 125, 38, 0, 23, 0}, {0, 135, 68, 42, 250, 42, 0, 24, 1}, {1, 139, 62, 41, 480, 40, 0, 21, 0}, {0, 173, 78, 32, 265, 46, 1, 58, 0}, {2, 83, 65, 28, 66, 36, 0, 24, 0}, {4, 125, 70, 18, 122, 28, 1, 45, 1}, {2, 81, 72, 15, 76, 30, 0, 25, 0}, {7, 195, 70, 33, 145, 25, 0, 55, 1}, {6, 154, 74, 32, 193, 29, 0, 39, 0}, {2, 117, 90, 19, 71, 25, 0, 21, 0}, {7, 94, 64, 25, 79, 33, 0, 41, 0}, {0, 180, 90, 26, 90, 36, 0, 35, 1}, {1, 130, 60, 23, 170, 28, 0, 21, 0}, {2, 84, 50, 23, 76, 30, 0, 21, 0}, {0, 139, 62, 17, 210, 22, 0, 21, 0}, {3, 99, 54, 19, 86, 25, 0, 24, 0}, {3, 163, 70, 18, 105, 31, 0, 28, 1}, {4, 103, 60, 33, 192, 24, 0, 33, 0}, {4, 111, 72, 47, 207, 37, 1, 56, 1}, {3, 180, 64, 25, 70, 34, 0, 26, 0}, {9, 171, 110, 24, 240, 45, 0, 54, 1}, {1, 103, 80, 11, 82, 19, 0, 22, 0}, {1, 101, 50, 15, 36, 24, 0, 26, 0}, {5, 88, 66, 21, 23, 24, 0, 30, 0}, {8, 176, 90, 34, 300, 33, 0, 58, 1}, {7, 150, 66, 42, 342, 34, 0, 42, 0}, {7, 187, 68, 39, 304, 37, 0, 41, 1}, {0, 100, 88, 60, 110, 46, 0, 31, 0}, {0, 105, 64, 41, 142, 41, 0, 22, 0}, {2, 141, 58, 34, 128, 25, 0, 24, 0}, {1, 95, 66, 13, 38, 19, 0, 25, 0}, {4, 146, 85, 27, 100, 28, 0, 27, 0}, {2, 100, 66, 20, 90, 32, 0, 28, 1}, {5, 139, 64, 35, 140, 28, 0, 26, 0}, {4, 129, 86, 20, 270, 35, 0, 23, 0}, {7, 83, 78, 26, 71, 29, 0, 36, 0}, {2, 110, 74, 29, 125, 32, 0, 27, 0}, {2, 100, 68, 25, 71, 38, 0, 26, 0}, {15, 136, 70, 32, 110, 37, 0, 43, 1}, {4, 123, 80, 15, 176, 32, 0, 34, 0}, {7, 81, 78, 40, 48, 46, 0, 42, 0}, {2, 142, 82, 18, 64, 24, 0, 21, 0}, {6, 144, 72, 27, 228, 33, 0, 40, 0}, {1, 71, 48, 18, 76, 20, 0, 22, 0}, {6, 93, 50, 30, 64, 28, 0, 23, 0}, {1, 122, 90, 51, 220, 49, 0, 31, 1}, {1, 81, 72, 18, 40, 26, 0, 24, 0}, {1, 126, 56, 29, 152, 28, 0, 21, 0}, {4, 144, 58, 28, 140, 29, 0, 37, 0}, {3, 83, 58, 31, 18, 34, 0, 25, 0}, {0, 95, 85, 25, 36, 37, 0, 24, 1}, {3, 171, 72, 33, 135, 33, 0, 24, 1}, {8, 155, 62, 26, 495, 34, 0, 46, 1}, {1, 89, 76, 34, 37, 31, 0, 23, 0}, {7, 160, 54, 32, 175, 30, 0, 39, 1}, {4, 99, 76, 15, 51, 23, 0, 21, 0}, {0, 162, 76, 56, 100, 53, 0, 25, 1}, {2, 107, 74, 30, 100, 33, 0, 23, 0}, {1, 88, 30, 42, 99, 55, 0, 26, 1}, {3, 120, 70, 30, 135, 42, 0, 30, 0}, {1, 118, 58, 36, 94, 33, 0, 23, 0}, {1, 117, 88, 24, 145, 34, 0, 40, 1}, {4, 173, 70, 14, 168, 29, 0, 33, 1}, {3, 170, 64, 37, 225, 34, 0, 30, 1}, {2, 96, 68, 13, 49, 21, 0, 26, 0}, {2, 125, 60, 20, 140, 33, 0, 31, 0}, {0, 100, 70, 26, 50, 30, 0, 21, 0}, {0, 93, 60, 25, 92, 28, 0, 22, 0}, {5, 105, 72, 29, 325, 36, 0, 28, 0}, {2, 108, 52, 26, 63, 32, 0, 22, 0}, {4, 154, 62, 31, 284, 32, 0, 23, 0}, {2, 106, 64, 35, 119, 30, 1, 34, 0}, {1, 136, 74, 50, 204, 37, 0, 24, 0}, {9, 156, 86, 28, 155, 34, 1, 42, 1}, {1, 153, 82, 42, 485, 40, 0, 23, 0}, {2, 99, 52, 15, 94, 24, 0, 21, 0}, {1, 109, 56, 21, 135, 25, 0, 23, 0}, {2, 88, 74, 19, 53, 29, 0, 22, 0}, {17, 163, 72, 41, 114, 40, 0, 47, 1}, {7, 102, 74, 40, 105, 37, 0, 45, 0}, {0, 114, 80, 34, 285, 44, 0, 27, 0}, {6, 104, 74, 18, 156, 29, 0, 41, 1}, {3, 111, 90, 12, 78, 28, 0, 29, 0}, {6, 134, 70, 23, 130, 35, 0, 29, 1}, {1, 79, 60, 42, 48, 43, 0, 23, 0}, {2, 75, 64, 24, 55, 29, 0, 33, 0}, {8, 179, 72, 42, 130, 32, 0, 36, 1}, {0, 129, 110, 46, 130, 67, 0, 26, 1}, {0, 119, 64, 18, 92, 34, 0, 23, 0}, {8, 181, 68, 36, 495, 30, 0, 60, 1}, {1, 128, 98, 41, 58, 32, 1, 33, 1}, {8, 109, 76, 39, 114, 27, 0, 31, 1}, {5, 139, 80, 35, 160, 31, 0, 25, 1}, {9, 123, 70, 44, 94, 33, 0, 40, 0}, {5, 158, 84, 41, 210, 39, 0, 29, 1}, {3, 107, 62, 13, 48, 22, 0, 23, 1}, {4, 109, 64, 44, 99, 34, 0, 26, 1}, {4, 148, 60, 27, 318, 30, 0, 29, 1}, {2, 99, 70, 16, 44, 20, 0, 27, 0}, {6, 103, 72, 32, 190, 37, 0, 55, 0}, {8, 196, 76, 29, 280, 37, 0, 57, 1}, {1, 96, 64, 27, 87, 33, 0, 21, 0}, {0, 140, 65, 26, 130, 42, 0, 24, 1}, {9, 112, 82, 32, 175, 34, 0, 36, 1}, {12, 151, 70, 40, 271, 41, 0, 38, 1}, {5, 109, 62, 41, 129, 35, 0, 25, 1}, {6, 125, 68, 30, 120, 30, 0, 32, 0}, {0, 177, 60, 29, 478, 34, 1, 21, 1}, {7, 142, 60, 33, 190, 28, 0, 61, 0}, {1, 100, 66, 15, 56, 23, 0, 26, 0}, {1, 87, 78, 27, 32, 34, 0, 22, 0}, {4, 197, 70, 39, 744, 36, 2, 31, 0}, {0, 117, 80, 31, 53, 45, 0, 24, 0}, {6, 134, 80, 37, 370, 46, 0, 46, 1}, {1, 79, 80, 25, 37, 25, 0, 22, 0}, {3, 74, 68, 28, 45, 29, 0, 23, 0}, {7, 181, 84, 21, 192, 35, 0, 51, 1}, {4, 91, 70, 32, 88, 33, 0, 22, 0}, {6, 119, 50, 22, 176, 27, 1, 33, 1}, {2, 146, 76, 35, 194, 38, 0, 29, 0}, {0, 165, 90, 33, 680, 52, 0, 23, 0}, {9, 124, 70, 33, 402, 35, 0, 34, 0}, {2, 90, 80, 14, 55, 24, 0, 24, 0}, {12, 92, 62, 7, 258, 27, 0, 44, 1}, {1, 193, 50, 16, 375, 25, 0, 24, 0}, {11, 155, 76, 28, 150, 33, 1, 51, 1}, {3, 191, 68, 15, 130, 30, 0, 34, 0}, {5, 96, 74, 18, 67, 33, 0, 43, 0}, {2, 108, 62, 32, 56, 25, 0, 21, 0}, {1, 71, 78, 50, 45, 33, 0, 21, 0}, {2, 100, 70, 52, 57, 40, 0, 25, 0}, {0, 104, 64, 23, 116, 27, 0, 23, 0}, {2, 108, 62, 10, 278, 25, 0, 22, 0}, {10, 129, 76, 28, 122, 35, 0, 39, 0}, {7, 133, 88, 15, 155, 32, 0, 37, 0}, {7, 136, 74, 26, 135, 26, 0, 51, 0}, {5, 155, 84, 44, 545, 38, 0, 34, 0}, {1, 119, 86, 39, 220, 45, 0, 29, 1}, {4, 96, 56, 17, 49, 20, 0, 26, 0}, {5, 108, 72, 43, 75, 36, 0, 33, 0}, {0, 78, 88, 29, 40, 36, 0, 21, 0}, {0, 107, 62, 30, 74, 36, 0, 25, 1}, {2, 128, 78, 37, 182, 43, 1, 31, 1}, {1, 128, 48, 45, 194, 40, 0, 24, 1}, {6, 151, 62, 31, 120, 35, 0, 28, 0}, {2, 146, 70, 38, 360, 28, 0, 29, 1}, {0, 126, 84, 29, 215, 30, 0, 24, 0}, {14, 100, 78, 25, 184, 36, 0, 46, 1}, {2, 144, 58, 33, 135, 31, 0, 25, 1}, {5, 77, 82, 41, 42, 35, 0, 35, 0}, {2, 120, 76, 37, 105, 39, 0, 29, 0}, {10, 161, 68, 23, 132, 25, 0, 47, 1}, {0, 137, 68, 14, 148, 24, 0, 21, 0}, {0, 128, 68, 19, 180, 30, 1, 25, 1}, {2, 124, 68, 28, 205, 32, 0, 30, 1}, {0, 106, 70, 37, 148, 39, 0, 22, 0}, {2, 155, 74, 17, 96, 26, 0, 27, 1}, {3, 113, 50, 10, 85, 29, 0, 25, 0}, {2, 112, 68, 22, 94, 34, 0, 26, 0}, {3, 99, 80, 11, 64, 19, 0, 30, 0}, {3, 115, 66, 39, 140, 38, 0, 28, 0}, {4, 129, 60, 12, 231, 27, 0, 31, 0}, {13, 152, 90, 33, 29, 26, 0, 43, 1}, {1, 157, 72, 21, 168, 25, 0, 24, 0}, {1, 122, 64, 32, 156, 35, 0, 30, 1}, {2, 102, 86, 36, 120, 45, 0, 23, 1}, {6, 105, 70, 32, 68, 30, 0, 37, 0}, {2, 87, 58, 16, 52, 32, 0, 25, 0}, {1, 95, 60, 18, 58, 23, 0, 22, 0}, {0, 165, 76, 43, 255, 47, 0, 26, 0}, {9, 152, 78, 34, 171, 34, 0, 33, 1}, {1, 130, 70, 13, 105, 25, 0, 22, 0}, {1, 95, 74, 21, 73, 25, 0, 36, 0}, {8, 126, 88, 36, 108, 38, 0, 49, 0}, {1, 139, 46, 19, 83, 28, 0, 22, 0}, {3, 99, 62, 19, 74, 21, 0, 26, 0}, {1, 90, 62, 12, 43, 27, 0, 24, 0}, {1, 125, 50, 40, 167, 33, 0, 28, 1}, {12, 88, 74, 40, 54, 35, 0, 48, 0}, {1, 196, 76, 36, 249, 36, 0, 29, 1}, {5, 189, 64, 33, 325, 31, 0, 29, 1}, {4, 147, 74, 25, 293, 34, 0, 30, 0}, {5, 99, 54, 28, 83, 34, 0, 30, 0}, {3, 81, 86, 16, 66, 27, 0, 22, 0}, {1, 133, 102, 28, 140, 32, 0, 45, 1}, {3, 173, 82, 48, 465, 38, 2, 25, 1}, {0, 84, 64, 22, 66, 35, 0, 21, 0}, {2, 105, 58, 40, 94, 34, 0, 25, 0}, {2, 122, 52, 43, 158, 36, 0, 28, 0}, {12, 140, 82, 43, 325, 39, 0, 58, 1}, {0, 98, 82, 15, 84, 25, 0, 22, 0}, {1, 87, 60, 37, 75, 37, 0, 22, 0}, {0, 93, 100, 39, 72, 43, 1, 35, 0}, {1, 107, 72, 30, 82, 30, 0, 24, 0}, {1, 109, 60, 8, 182, 25, 0, 21, 0}, {1, 90, 62, 18, 59, 25, 1, 25, 0}, {1, 125, 70, 24, 110, 24, 0, 25, 0}, {1, 119, 54, 13, 50, 22, 0, 24, 0}, {5, 144, 82, 26, 285, 32, 0, 58, 1}, {3, 100, 68, 23, 81, 31, 0, 28, 0}, {1, 100, 66, 29, 196, 32, 0, 42, 0}, {1, 131, 64, 14, 415, 23, 0, 21, 0}, {4, 116, 72, 12, 87, 22, 0, 37, 0}, {2, 127, 58, 24, 275, 27, 1, 25, 0}, {3, 96, 56, 34, 115, 24, 0, 39, 0}, {5, 136, 84, 41, 88, 35, 0, 35, 1}, {2, 123, 48, 32, 165, 42, 0, 26, 0}, {1, 172, 68, 49, 579, 42, 0, 28, 1}, {1, 112, 72, 30, 176, 34, 0, 25, 0}, {1, 143, 84, 23, 310, 42, 1, 22, 0}, {1, 143, 74, 22, 61, 26, 0, 21, 0}, {0, 138, 60, 35, 167, 34, 0, 21, 1}, {3, 173, 84, 33, 474, 35, 0, 22, 1}, {3, 129, 64, 29, 115, 26, 0, 28, 1}, {1, 119, 88, 41, 170, 45, 0, 26, 0}, {2, 94, 68, 18, 76, 26, 0, 21, 0}, {0, 102, 64, 46, 78, 40, 0, 21, 0}, {8, 151, 78, 32, 210, 42, 0, 36, 1}, {4, 184, 78, 39, 277, 37, 0, 31, 1}, {1, 181, 64, 30, 180, 34, 0, 38, 1}, {0, 135, 94, 46, 145, 40, 0, 26, 0}, {1, 95, 82, 25, 180, 35, 0, 43, 1}, {3, 89, 74, 16, 85, 30, 0, 38, 0}, {1, 80, 74, 11, 60, 30, 0, 22, 0}, {2, 83, 66, 23, 50, 32, 0, 22, 0}, {4, 117, 64, 27, 120, 33, 0, 24, 0}, {0, 180, 78, 63, 14, 59, 2, 25, 1}, {1, 100, 72, 12, 70, 25, 0, 28, 0}, {0, 95, 80, 45, 92, 36, 0, 26, 0}, {0, 104, 64, 37, 64, 33, 0, 22, 1}, {0, 120, 74, 18, 63, 30, 0, 26, 0}, {1, 82, 64, 13, 95, 21, 0, 23, 0}, {0, 91, 68, 32, 210, 39, 0, 25, 0}, {2, 100, 54, 28, 105, 37, 0, 24, 0}, {5, 86, 68, 28, 71, 30, 0, 24, 0}, {10, 148, 84, 48, 237, 37, 1, 51, 1}, {9, 134, 74, 33, 60, 25, 0, 81, 0}, {9, 120, 72, 22, 56, 20, 0, 48, 0}, {8, 74, 70, 40, 49, 35, 0, 39, 0}, {0, 124, 56, 13, 105, 21, 0, 21, 0}, {0, 74, 52, 10, 36, 27, 0, 22, 0}, {0, 97, 64, 36, 100, 36, 0, 25, 0}, {6, 154, 78, 41, 140, 46, 0, 27, 0}, {2, 105, 80, 45, 191, 33, 0, 29, 1}, {7, 114, 76, 17, 110, 23, 0, 31, 0}, {8, 126, 74, 38, 75, 25, 0, 39, 0}, {3, 158, 70, 30, 328, 35, 0, 35, 1}, {4, 85, 58, 22, 49, 27, 0, 28, 0}, {9, 145, 88, 34, 165, 30, 0, 53, 1}, {6, 129, 90, 7, 326, 19, 0, 60, 0}, {2, 68, 70, 32, 66, 25, 0, 25, 0}, {3, 124, 80, 33, 130, 33, 0, 26, 0}, {1, 97, 64, 19, 82, 18, 0, 21, 0}, {3, 116, 74, 15, 105, 26, 0, 24, 0}, {0, 117, 66, 31, 188, 30, 0, 22, 0}, {2, 122, 60, 18, 106, 29, 0, 22, 0}, {1, 86, 66, 52, 65, 41, 0, 29, 0}, {1, 77, 56, 30, 56, 33, 1, 24, 0}, {0, 127, 80, 37, 210, 36, 0, 23, 0}, {3, 129, 92, 49, 155, 36, 0, 32, 1}, {8, 100, 74, 40, 215, 39, 0, 43, 1}, {3, 128, 72, 25, 190, 32, 0, 27, 1}, {4, 84, 90, 23, 56, 39, 0, 25, 0}, {1, 88, 78, 29, 76, 32, 0, 29, 0}, {8, 186, 90, 35, 225, 34, 0, 37, 1}, {5, 187, 76, 27, 207, 43, 1, 53, 1}, {4, 131, 68, 21, 166, 33, 0, 28, 0}, {1, 164, 82, 43, 67, 32, 0, 50, 0}, {3, 84, 68, 30, 106, 31, 0, 25, 0}, {1, 88, 62, 24, 44, 29, 0, 23, 0}, {1, 84, 64, 23, 115, 36, 0, 28, 0}, {7, 124, 70, 33, 215, 25, 0, 37, 0}, {0, 198, 66, 32, 274, 41, 0, 28, 1}, {1, 87, 68, 34, 77, 37, 0, 24, 0}, {6, 99, 60, 19, 54, 26, 0, 32, 0}, {2, 95, 54, 14, 88, 26, 0, 22, 0}, {1, 99, 72, 30, 18, 38, 0, 21, 0}, {6, 92, 62, 32, 126, 32, 0, 46, 0}, {4, 154, 72, 29, 126, 31, 0, 37, 0}, {0, 121, 66, 30, 165, 34, 0, 33, 1}, {3, 111, 58, 31, 44, 29, 0, 22, 0}, {2, 98, 60, 17, 120, 34, 0, 22, 0}, {1, 143, 86, 30, 330, 30, 0, 23, 0}, {1, 119, 44, 47, 63, 35, 0, 25, 0}, {6, 108, 44, 20, 130, 24, 0, 35, 0}, {8, 124, 76, 24, 600, 28, 0, 52, 1}, {3, 176, 86, 27, 156, 33, 1, 52, 1}, {2, 112, 78, 50, 140, 39, 0, 24, 0}, {2, 82, 52, 22, 115, 28, 1, 25, 0}, {6, 123, 72, 45, 230, 33, 0, 34, 0}, {0, 188, 82, 14, 185, 32, 0, 22, 1}, {1, 89, 24, 19, 25, 27, 0, 21, 0}, {1, 109, 38, 18, 120, 23, 0, 26, 0}, {7, 150, 78, 29, 126, 35, 0, 54, 1}, {1, 181, 78, 42, 293, 40, 1, 22, 1}, {1, 92, 62, 25, 41, 19, 0, 25, 0}, {0, 152, 82, 39, 272, 41, 0, 27, 0}, {1, 111, 62, 13, 182, 24, 0, 23, 0}, {3, 106, 54, 21, 158, 30, 0, 24, 0}, {3, 174, 58, 22, 194, 32, 0, 36, 1}, {7, 168, 88, 42, 321, 38, 0, 40, 1}, {11, 138, 74, 26, 144, 36, 0, 50, 1}, {2, 68, 62, 13, 15, 20, 0, 23, 0}, {2, 112, 86, 42, 160, 38, 0, 28, 0}, {0, 94, 70, 27, 115, 43, 0, 21, 0}, {4, 90, 88, 47, 54, 37, 0, 29, 0}, {0, 102, 78, 40, 90, 34, 0, 24, 0}, {1, 128, 82, 17, 183, 27, 0, 22, 0}, {2, 94, 76, 18, 66, 31, 0, 23, 0}, {7, 97, 76, 32, 91, 40, 0, 32, 1}, {1, 100, 74, 12, 46, 19, 0, 28, 0}, {0, 102, 86, 17, 105, 29, 0, 27, 0}, {3, 103, 72, 30, 152, 27, 0, 27, 0}, {2, 157, 74, 35, 440, 39, 0, 30, 0}, {1, 167, 74, 17, 144, 23, 0, 33, 1}, {0, 179, 50, 36, 159, 37, 0, 22, 1}, {11, 136, 84, 35, 130, 28, 0, 42, 1}, {1, 91, 54, 25, 100, 25, 0, 23, 0}, {1, 117, 60, 23, 106, 33, 0, 27, 0}, {5, 123, 74, 40, 77, 34, 0, 28, 0}, {1, 106, 70, 28, 135, 34, 0, 22, 0}, {2, 155, 52, 27, 540, 38, 0, 25, 1}, {2, 101, 58, 35, 90, 21, 0, 22, 0}, {1, 120, 80, 48, 200, 38, 1, 41, 0}, {3, 80, 82, 31, 70, 34, 1, 27, 1}, {8, 167, 106, 46, 231, 37, 0, 43, 1}, {9, 145, 80, 46, 130, 37, 0, 40, 1}, {1, 112, 80, 45, 132, 34, 0, 24, 0}, {6, 98, 58, 33, 190, 34, 0, 43, 0}, {9, 154, 78, 30, 100, 30, 0, 45, 0}, {6, 165, 68, 26, 168, 33, 0, 49, 0}, {10, 68, 106, 23, 49, 35, 0, 47, 0}, {3, 123, 100, 35, 240, 57, 0, 22, 0}, {2, 101, 58, 17, 265, 24, 0, 23, 0}, {2, 56, 56, 28, 45, 24, 0, 22, 0}, {0, 95, 64, 39, 105, 44, 0, 22, 0}, {2, 129, 74, 26, 205, 33, 0, 25, 0}, {1, 140, 74, 26, 180, 24, 0, 23, 0}, {1, 144, 82, 46, 180, 46, 0, 46, 1}, {2, 121, 70, 32, 95, 39, 0, 23, 0}, {7, 129, 68, 49, 125, 38, 0, 43, 1}, {7, 142, 90, 24, 480, 30, 0, 43, 1}, {3, 169, 74, 19, 125, 29, 0, 31, 1}, {4, 127, 88, 11, 155, 34, 0, 28, 0}, {2, 122, 76, 27, 200, 35, 0, 26, 0}, {4, 110, 76, 20, 100, 28, 0, 27, 0}, {2, 127, 46, 21, 335, 34, 0, 22, 0}, {2, 93, 64, 32, 160, 38, 0, 23, 1}, {3, 158, 64, 13, 387, 31, 0, 24, 0}, {5, 126, 78, 27, 22, 29, 0, 40, 0}, {0, 134, 58, 20, 291, 26, 0, 21, 0}, {7, 187, 50, 33, 392, 33, 0, 34, 1}, {3, 173, 78, 39, 185, 33, 0, 31, 1}, {1, 108, 60, 46, 178, 35, 0, 24, 0}, {1, 114, 66, 36, 200, 38, 0, 21, 0}, {1, 149, 68, 29, 127, 29, 0, 42, 1}, {5, 117, 86, 30, 105, 39, 0, 42, 0}, {1, 116, 78, 29, 180, 36, 0, 25, 0}, {3, 130, 78, 23, 79, 28, 0, 34, 1}, {2, 174, 88, 37, 120, 44, 0, 24, 1}, {2, 106, 56, 27, 165, 29, 0, 22, 0}, {0, 126, 86, 27, 120, 27, 0, 21, 0}, {2, 99, 60, 17, 160, 36, 0, 21, 0}, {11, 120, 80, 37, 150, 42, 0, 48, 1}, {3, 102, 44, 20, 94, 30, 0, 26, 0}, {1, 109, 58, 18, 116, 28, 0, 22, 0}, {13, 153, 88, 37, 140, 40, 1, 39, 0}, {12, 100, 84, 33, 105, 30, 0, 46, 0}, {1, 81, 74, 41, 57, 46, 1, 32, 0}, {3, 187, 70, 22, 200, 36, 0, 36, 1}, {1, 121, 78, 39, 74, 39, 0, 28, 0}, {0, 181, 88, 44, 510, 43, 0, 26, 1}, {1, 128, 88, 39, 110, 36, 1, 37, 1}, {2, 88, 58, 26, 16, 28, 0, 22, 0}, {10, 101, 76, 48, 180, 32, 0, 63, 0}, {5, 121, 72, 23, 112, 26, 0, 30, 0}, {0, 136, 74, 49, 220, 20, 0, 44, 1}, {0, 116, 64, 39, 225, 40, 0, 50, 0}, {2, 142, 94, 59, 177, 38, 0, 63, 1}, {0, 163, 40, 23, 64, 40, 0, 33, 0}, {2, 167, 44, 30, 140, 52, 0, 28, 0}};

        for (int row =0; row < 100;row++){
            setInterpreter(bigTest[0]);
            setInterpreter(bigTest[1]);
        }

    }

    public void setInterpreter(float[] userData){
        FirebaseModelDownloader.getInstance().getModel("DiabetesAi", DownloadType.LOCAL_MODEL_UPDATE_IN_BACKGROUND, conditions).addOnSuccessListener(model -> {
            File modelFile = model.getFile();
            try (Interpreter interpreter = new Interpreter(modelFile)) {
                interpreter.allocateTensors();
                FloatBuffer input = FloatBuffer.allocate(interpreter.getInputTensor(0).numElements());
                input.put(userData[0]);
                input.put(userData[1]);
                input.put(userData[2]);
                input.put(userData[3]);
                input.put(userData[4]);
                input.put(userData[5]);
                input.put(userData[6]);
                input.put(userData[7]);
                input.rewind();

                FloatBuffer output = FloatBuffer.allocate(interpreter.getOutputTensor(0).numElements());

                interpreter.run(input, output);


                float[] fb = output.array();
                //if(fb[0]<0.5f){
                //     fb[0] = 0;
                // }
                // else{
                //     fb[0] = 1;
                // }
                Log.d("RESULT", String.valueOf(fb[0]));
                interpreter.close();
                input.clear();
                output.clear();
            }
            catch(Exception e) {
                Log.d("RESULT", String.valueOf(e));
            }
        });
    }
}